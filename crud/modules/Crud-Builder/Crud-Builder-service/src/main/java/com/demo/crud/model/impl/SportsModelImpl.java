/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.demo.crud.model.impl;

import com.demo.crud.model.Sports;
import com.demo.crud.model.SportsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Sports service. Represents a row in the &quot;Sports_Sports&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SportsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SportsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SportsImpl
 * @generated
 */
@JSON(strict = true)
public class SportsModelImpl
	extends BaseModelImpl<Sports> implements SportsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sports model instance should use the <code>Sports</code> interface instead.
	 */
	public static final String TABLE_NAME = "Sports_Sports";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"sportsId", Types.BIGINT},
		{"sportsName", Types.VARCHAR}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sportsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sportsName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Sports_Sports (uuid_ VARCHAR(75) null,sportsId LONG not null primary key,sportsName VARCHAR(75) null,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Sports_Sports";

	public static final String ORDER_BY_JPQL = " ORDER BY sports.sportsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Sports_Sports.sportsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPORTSNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPORTSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SportsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sportsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSportsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sportsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sports.class;
	}

	@Override
	public String getModelClassName() {
		return Sports.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Sports, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Sports, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Sports, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Sports)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Sports, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Sports, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Sports)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Sports, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Sports, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Sports, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Sports, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Sports, Object>>();

			attributeGetterFunctions.put("uuid", Sports::getUuid);
			attributeGetterFunctions.put("sportsId", Sports::getSportsId);
			attributeGetterFunctions.put("sportsName", Sports::getSportsName);
			attributeGetterFunctions.put("description", Sports::getDescription);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Sports, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Sports, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Sports, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Sports, String>)Sports::setUuid);
			attributeSetterBiConsumers.put(
				"sportsId", (BiConsumer<Sports, Long>)Sports::setSportsId);
			attributeSetterBiConsumers.put(
				"sportsName",
				(BiConsumer<Sports, String>)Sports::setSportsName);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<Sports, String>)Sports::setDescription);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSportsId() {
		return _sportsId;
	}

	@Override
	public void setSportsId(long sportsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sportsId = sportsId;
	}

	@JSON
	@Override
	public String getSportsName() {
		if (_sportsName == null) {
			return "";
		}
		else {
			return _sportsName;
		}
	}

	@Override
	public void setSportsName(String sportsName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sportsName = sportsName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSportsName() {
		return getColumnOriginalValue("sportsName");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Sports.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sports toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Sports>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SportsImpl sportsImpl = new SportsImpl();

		sportsImpl.setUuid(getUuid());
		sportsImpl.setSportsId(getSportsId());
		sportsImpl.setSportsName(getSportsName());
		sportsImpl.setDescription(getDescription());

		sportsImpl.resetOriginalValues();

		return sportsImpl;
	}

	@Override
	public Sports cloneWithOriginalValues() {
		SportsImpl sportsImpl = new SportsImpl();

		sportsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		sportsImpl.setSportsId(this.<Long>getColumnOriginalValue("sportsId"));
		sportsImpl.setSportsName(
			this.<String>getColumnOriginalValue("sportsName"));
		sportsImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));

		return sportsImpl;
	}

	@Override
	public int compareTo(Sports sports) {
		long primaryKey = sports.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Sports)) {
			return false;
		}

		Sports sports = (Sports)object;

		long primaryKey = sports.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Sports> toCacheModel() {
		SportsCacheModel sportsCacheModel = new SportsCacheModel();

		sportsCacheModel.uuid = getUuid();

		String uuid = sportsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sportsCacheModel.uuid = null;
		}

		sportsCacheModel.sportsId = getSportsId();

		sportsCacheModel.sportsName = getSportsName();

		String sportsName = sportsCacheModel.sportsName;

		if ((sportsName != null) && (sportsName.length() == 0)) {
			sportsCacheModel.sportsName = null;
		}

		sportsCacheModel.description = getDescription();

		String description = sportsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			sportsCacheModel.description = null;
		}

		return sportsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Sports, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Sports, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Sports, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Sports)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Sports>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Sports.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _sportsId;
	private String _sportsName;
	private String _description;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Sports, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Sports)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("sportsId", _sportsId);
		_columnOriginalValues.put("sportsName", _sportsName);
		_columnOriginalValues.put("description", _description);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("sportsId", 2L);

		columnBitmasks.put("sportsName", 4L);

		columnBitmasks.put("description", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Sports _escapedModel;

}